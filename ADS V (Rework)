repeat wait() until game:IsLoaded()
local p, c, t, w, r, h, a, b =
    game:GetService "Players",
    game:GetService "CoreGui",
    game:GetService "TweenService",
    game:GetService "Workspace",
    game:GetService "ReplicatedStorage",
    game:GetService "HttpService",
    getgenv(),
    game:GetService "VirtualUser"

    if c:FindFirstChild("CrazyDay") or a.loading then return end
    local AddSignal, Notify, Text = {}, {}, {}
    function AddSignal.h(s, d, j, g)
        table.insert(AddSignal, {s, d, j, g})
    end
    a.loading = true
    local Lp, Game, Ver, Space, Time, LpId, Lvl, LpUi, GameId, Display, RE, RF, GameMap  =
        p.LocalPlayer,
        "Anime Dimensions Simulator (Rework)",
        " V 1.1.1",
        "                                                                                                                                                                                                                                                                                                                                    \n",
        tick(),
        p:GetUserIdFromNameAsync(p.LocalPlayer.Name),
        p.LocalPlayer:WaitForChild("leaderstats"):WaitForChild("Level"),
        p.LocalPlayer.PlayerGui,
        game.PlaceId,
        r:WaitForChild(p.LocalPlayer.Name.."StatDisplay"),
        r:WaitForChild("RemoteEvents"):WaitForChild("MainRemoteEvent"),
        r:WaitForChild("RemoteFunctions"):WaitForChild("MainRemoteFunction"),
        w:WaitForChild("GameMap"):FindFirstChildOfClass("Model").Name

    local misc = {
        playing = 0,
        speed = 135,
        tween = false,
        wait = 0,
        rarity = {a = false},
        skill = {a = false},
        webhook = {a = false},
        character = {},
        swap = {},
        raid = {},
        dimension = {}
        }

        AddSignal.h(
            Lp.OnTeleport:Connect(function (s)
                local z = queue_on_teleport or queueonteleport or (syn and syn.queue_on_teleport)
                if s ~= Enum.TeleportState.InProgress then return end
                a.teleporting = true
                z(
                [[
                loadstring(game:HttpGet('https://raw.githubusercontent.com/Mangadexwannatest/CanislupusXHUB/main/ADS%20V%20(Rework)'))()
                ]])
            end),
            Lp.Idled:Connect(function ()
                b:CaptureController()
                b:ClickButton2(Vector2.new())
            end),
            c.RobloxPromptGui.promptOverlay.ChildAdded:Connect(function (v)
                if (v.Name == "ErrorPrompt" and v:FindFirstChild("MessageArea")) and v.MessageArea:FindFirstChild("ErrorFrame") then
                    repeat
                    game:GetService("TeleportService"):Teleport(6938803436)
                    wait(1)
                    until not v.Parent
                end
            end)
        )

        function Tween(x, q, s)
            misc.tween =  t:Create(Lp.Character.HumanoidRootPart, TweenInfo.new((x.Position - Lp.Character.HumanoidRootPart.Position).Magnitude/(s or misc.speed), Enum.EasingStyle.Linear), {CFrame = x.CFrame * (q or CFrame.new(0,0,0)) })
        end

        function SetHead(q)
            for i, v in ipairs(w.Folders.Monsters:GetChildren()) do
                if v:FindFirstChildOfClass("BillboardGui") and v:FindFirstChild("Head") and v.Head.Transparency ~= q then
                    v.Head.Transparency = q
                end
            end
        end
        task.spawn(
            function ()
                local q = {}
                for x, o in pairs(require(r:WaitForChild("Modules"):WaitForChild("settings"))) do
                    if x == "MapInfo" and type(o) == "table" then
                        for u, y in pairs(o) do
                            if not y.isRaid and not y.isShadowRaid and y.canBeQueued == true then
                                table.insert(q,{
                                    ["l"] = y.order,
                                    ["n"] = u
                                })
                            end
                        end
                    end
                end
                table.sort(q ,function (x,o)
                    return x["l"] < o["l"]
                end)
                for i = 1, #q do
                    table.insert(misc.dimension,q[i]["n"])
                end
            end
        )
        task.spawn(
            function ()
                local q = {}
                for x, o in pairs(require(r:WaitForChild("Modules"):WaitForChild("settings"))) do
                    if x == "MapInfo" and type(o) == "table" then
                        for u, y in pairs(o) do
                            if y.isRaid == true and y.canBeQueued == true then
                                table.insert(q,{
                                    ["l"] = y.order,
                                    ["n"] = u
                                })
                            end
                        end
                    end
                end
                table.sort(q ,function (x,o)
                    return x["l"] < o["l"]
                end)
                for i = 1, #q do
                    table.insert(misc.raid,q[i]["n"])
                end
            end
        )
        local Gui = loadstring(game:HttpGet("https://raw.githubusercontent.com/CrazyDayPlace/Place-One-/main/Gui.lua"))()
        local Save = loadstring(game:HttpGet("https://raw.githubusercontent.com/CrazyDayPlace/Place-One-/main/Save.lua"))()
        local Init = loadstring(game:HttpGet("https://raw.githubusercontent.com/CrazyDayPlace/Place-One-/main/interfaces.lua"))()
        local Func = loadstring(game:HttpGet("https://raw.githubusercontent.com/CrazyDayPlace/Place-One-/main/function.lua"))()
        local Options = Gui.Options
        local Files = "CrazyDay/" .. Game .. "/" .. LpId
        local Window = Gui:CreateWindow({
            Title = Game .. Ver,
            SubTitle = " [YT: @crazyday3693]",
            UpdateDate = "07/08/2024 [V 1.1.1]",
            UpdateLog = "● Fixed Auto Join [Highnest] Not Working" .. Space .. "● Fixed Black Screen Not Save",
            IconVisual = nil,
            TabWidth = 155,
            Size = UDim2.fromOffset(605, 445),
            Acrylic = true,
            Theme = "Darker",
            MinimizeKey = Enum.KeyCode.RightControl,
            BlackScreen = false
        })

        local Tabs = {
            a = Window:AddTab({Title = "Join", Name = nil, Icon = "angle-double-small-up"}),
            b = Window:AddTab({Title = "Game", Name = nil, Icon = "align-justify"}),
            c = Window:AddTab({ Title = "Character", Name = nil, Icon = "users"}),
            d = Window:AddTab({ Title = "● Character 1 [Combo]", Name = "Character 1 [Combo]", Icon = "rbxassetid://"}),
            e = Window:AddTab({ Title = "● Character 2 [Combo]", Name = "Character 2 [Combo]", Icon = "rbxassetid://"}),
            f = Window:AddTab({ Title = "● Character 3 [Combo]", Name = "Character 3 [Combo]", Icon = "rbxassetid://"}),
            g = Window:AddTab({ Title = "Webhook", Icon = "bell"}),
            t = Window:AddTab({ Title = "Settings", Icon = "settings"})
        }

        local AV = {
            a = {Tabs.a:AddSection("Dimension Sections"), Tabs.a:AddSection("Raid Sections"), Tabs.a:AddSection("Boss Rush Sections"), Tabs.a:AddSection("Infinite Mode Sections")},
            b = {Tabs.b:AddSection("Main Sections"), Tabs.b:AddSection("Time Sections"), Tabs.b:AddSection("Card Sections"), Tabs.b:AddSection("Claim Sections"), Tabs.b:AddSection("Misc Sections")},
            c = {Tabs.c:AddSection("Skill Sections"), Tabs.c:AddSection("Character Sections")},
            d = {Tabs.g:AddSection("Webhook Main Sections"), Tabs.g:AddSection("Webhook Misc Sections")}
        }


        AV.a[1]:AddDropdown("Selected Dimension", {
            Title = "Select Dimension: ",
            Description = nil,
            Values = misc.dimension,
            Multi = false,
            Default = 1,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[1]:AddDropdown("Selected Difficulty", {
            Title = "Select Difficulty: ",
            Description = nil,
            Values = {
                "Easy",
                "Hard",
                "Nightmare"
            },
            Multi = false,
            Default = 1,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })


        AV.a[1]:AddToggle("Enabled Hardcore", {
            Title = "Enabled Hardcore",
            Description = nil,
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[1]:AddToggle("Enabled FriendsOnly", {
            Title = "Enabled FriendsOnly",
            Description = nil,
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[1]:AddToggle("Auto Retry", {
            Title = "Auto Retry",
            Description = nil,
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[1]:AddToggle("Auto Join [Normal]", {
            Title = "Auto Join [Normal]",
            Description = "Automatically create and start the selected dimension.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[1]:AddToggle("Auto Join [Highnest]", {
            Title = "Auto Join [Highnest]",
            Description = "Automatically create and start the highest level dimension.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                if v then
                    local x, o = Options["Selected Dimension"], Options["Selected Difficulty"]
                    if Lvl.Value > 0 and Lvl.Value < 6 then
                        a.diff = "Easy"
                        a.room = "Titan Dimension"
                    elseif Lvl.Value > 5 and Lvl.Value < 11 then
                        a.diff = "Hard"
                        a.room = "Titan Dimension"
                    elseif Lvl.Value > 10 and Lvl.Value < 16 then
                        a.diff = "Nightmare"
                        a.room = "Titan Dimension"
                    elseif Lvl.Value > 15 and Lvl.Value < 21 then
                        a.diff = "Easy"
                        a.room = "Demon Dimension"
                    elseif Lvl.Value > 20 and Lvl.Value < 26 then
                        a.diff = "Hard"
                        a.room = "Demon Dimension"
                    elseif Lvl.Value > 25 and Lvl.Value < 31 then
                        a.diff = "Nightmare"
                        a.room = "Demon Dimension"
                    elseif Lvl.Value > 30 and Lvl.Value < 36 then
                        a.diff = "Easy"
                        a.room = "Curse Dimension"
                    elseif Lvl.Value > 35 and Lvl.Value < 41 then
                        a.diff = "Hard"
                        a.room = "Curse Dimension"
                    elseif Lvl.Value > 40 and Lvl.Value < 46 then
                        a.diff = "Nightmare"
                        a.room = "Curse Dimension"
                    elseif Lvl.Value > 45 and Lvl.Value < 51 then
                        a.diff = "Easy"
                        a.room = "Villain Dimension"
                    elseif Lvl.Value > 50 and Lvl.Value < 56 then
                        a.diff = "Hard"
                        a.room = "Villain Dimension"
                    elseif Lvl.Value > 55 and Lvl.Value < 61 then
                        a.diff = "Nightmare"
                        a.room = "Villain Dimension"
                    elseif Lvl.Value > 60 and Lvl.Value < 68 then
                        a.diff = "Easy"
                        a.room = "Sword Dimension"
                    elseif Lvl.Value > 67 and Lvl.Value < 76 then
                        a.diff = "Nightmare"
                        a.room = "Sword Dimension"
                    elseif Lvl.Value > 75 and Lvl.Value < 83 then
                        a.diff = "Easy"
                        a.room = "Ghoul Dimension"
                    elseif Lvl.Value > 82 and Lvl.Value < 91 then
                        a.diff = "Nightmare"
                        a.room = "Ghoul Dimension"
                    elseif Lvl.Value > 90 and Lvl.Value < 98 then
                        a.diff = "Easy"
                        a.room = "Fate Dimension"
                    elseif Lvl.Value > 97 and Lvl.Value < 106 then
                        a.diff = "Nightmare"
                        a.room = "Fate Dimension"
                    elseif Lvl.Value > 105 and Lvl.Value < 113 then
                        a.diff = "Easy"
                        a.room = "Slime Dimension"
                    elseif Lvl.Value > 112 and Lvl.Value < 121 then
                        a.diff = "Nightmare"
                        a.room = "Slime Dimension"
                    elseif Lvl.Value > 120 and Lvl.Value < 131 then
                        a.diff = "Nightmare"
                        a.room = "Devil Dimension"
                    elseif Lvl.Value > 130 and Lvl.Value < 141 then
                        a.diff = "Nightmare"
                        a.room = "Pirate Dimension"
                    elseif Lvl.Value > 140 and Lvl.Value < 151 then
                        a.diff = "Nightmare"
                        a.room = "Alien Dimension"
                    elseif Lvl.Value > 150 and Lvl.Value < 161  then
                        a.diff = "Nightmare"
                        a.room = "Level Dimension"
                    else
                        a.diff = "Nightmare"
                        a.room = misc.dimension[#misc.dimension]
                    end
                end
            end
        })

        AV.a[2]:AddDropdown("Selected Raid", {
            Title = "Select Raid: ",
            Description = nil,
            Values = misc.raid,
            Multi = false,
            Default = 1,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[2]:AddToggle("Auto Join [Raid]", {
            Title = "Auto Join [Raid]",
            Description = "Automatically create and start the selected raid.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[2]:AddToggle("Auto Join [Raid Challenge]", {
            Title = "Auto Join [Raid Challenge]",
            Description = "Automatically join the raid challenge if reward available.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[2]:AddToggle("Auto Join [Speed Raid]", {
            Title = "Auto Join [Speed Raid]",
            Description = "Automatically join the speed raid if not on cooldown.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[3]:AddParagraph({
            Title = "NOTE",
            Content = "● Free: join the boss rush if have free entry.\n● Ticket: join the boss rush if ticket left.\n● Gem: buy the ticket with gem if not ticket left and then will be start.\n● Raid: buy the ticket with raidtoken if not ticket left and then will be start."
        })

        Text["Ticket"] =
        AV.a[3]:AddParagraph({
            Title = "Ticket Left: "..LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text,
            Content = nil
        })
        Text["Free Ticket"] =
        AV.a[3]:AddParagraph({
            Title = "Free Entry Left: " ..tostring(Display.BossRushFreeEntry.Value),
            Content = nil
        })

        AddSignal.h(
            LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount:GetPropertyChangedSignal "Text":Connect(function ()
                Text["Ticket"]:SetTitle("Ticket Left: "..LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text)
            end),
            Display.BossRushFreeEntry:GetPropertyChangedSignal "Value":Connect(function ()
                Text["Free Ticket"]:SetTitle("Free Entry Left: " ..tostring(Display.BossRushFreeEntry.Value))
            end)
        )

        AV.a[3]:AddDropdown("Selected Type [Boss Rush]", {
            Title = "Select Type: ",
            Description = nil,
            Values = {
                "Free",
                "Ticket",
                "Gem",
                "Raid"
            },
            Multi = false,
            Default = 1,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[3]:AddToggle("Auto Join [Boss Rush]", {
            Title = "Auto Join [Boss Rush]",
            Description = nil,
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[4]:AddParagraph({
            Title = "NOTE",
            Content = "If you enable dodge skills while playing infinite mode, you may have a chance of getting kicked."
        })

        AV.a[4]:AddInput("Wave [End]", {
            Title = "Wave [End]",
            Description = nil,
            Default = "10",
            Placeholder = "number only.",
            Numeric = true,
            Finished = false,
            Callback = function(v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[4]:AddToggle("Auto Join [Infinite Mode]", {
            Title = "Auto Join [Infinite Mode]",
            Description = "Automatically join the infinite mode if reward available.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.a[4]:AddToggle("Auto Reset [Infinite Mode]", {
            Title = "Auto Reset [Infinite Mode]",
            Description = "Automatically reset character if wave match wave [end].",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[1]:AddDropdown("Selected Mode [Farm]", {
            Title = "Select Mode: ",
            Description = nil,
            Values = {
                "Normal Mode",
                "Bring Mode"
            },
            Multi = false,
            Default = 2,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                a.bring1 = false
                misc.playing = 0
                SetHead(1)
            end
        })

        AV.b[1]:AddDropdown("Selected Type [Farm]", {
            Title = "Select Type: ",
            Description = nil,
            Values = {
                "Behind",
                "Front",
                "Over",
                "Under"
            },
            Multi = false,
            Default = 3,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[1]:AddSlider("Selected Distance",{
            Title = "Enemy Distance: ",
            Description = nil,
            Default = 6.55,
            Min = 0,
            Max = 10,
            Rounding = 1,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[1]:AddSlider("Selected Health",{
            Title = "Safe Health at: ",
            Description = "Choose the health \nif player below x % HP",
            Default = 50,
            Min = 10,
            Max = 100,
            Rounding = 0,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[1]:AddToggle("Auto Safe", {
            Title = "Auto Safe",
            Description = "Stop all farm if player below x % HP.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[1]:AddToggle("Auto Enemy Distance", {
            Title = "Auto Enemy Distance",
            Description = "Automatically set the distance calculated from the size of the enemy.",
            Default = true,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[1]:AddToggle("Enabled Dodge Skill", {
            Title = "Enabled Dodge Skill",
            Description = "Dodge all enemy skills.",
            Default = true,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        Text["Time"] =
        AV.b[2]:AddParagraph({
            Title = "Time: 00:00:00",
            Content = nil
        })

        AV.b[2]:AddDropdown("Selected Type [Time]", {
            Title = "Select Type: ",
            Description = nil,
            Values = {
                "Second",
                "Minute",
                "Hour"
            },
            Multi = false,
            Default = 2,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[2]:AddSlider("Selected Time",{
            Title = "Leave Time at: ",
            Description = nil,
            Default = 20,
            Min = 1,
            Max = 60,
            Rounding = 0,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[2]:AddToggle("Auto Back to Lobby", {
            Title = "Auto Back to Lobby",
            Description = "Automatically teleport to the lobby \nif the time match x time.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[3]:AddDropdown("Selected Rarity", {
            Title = "Select Rarity: ",
            Description = nil,
            Values = {
                "Common",
                "Uncommon",
                "Rare",
                "Epic",
                "Legendary",
                "Mythic",
                "Divine"
            },
            Multi = true,
            Default = {
                "Common",
                "Uncommon"
            },
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                misc.rarity = {a = true}
                for x, o in pairs(v) do
                    if o == true then
                        table.insert(misc.rarity, x)
                    end
                end
            end
        })

        AV.b[3]:AddToggle("Auto Equip [Card]", {
            Title = "Auto Equip [Card]",
            Description = "Automatically equip your best card.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                if not v or (GameId ~= 7338881230 and GameId ~= 6938803436 and GameId ~= 7274690025) then return end
                RF:InvokeServer("UnequipCard", Display.Slot1.Value)
                RF:InvokeServer("UnequipCard", Display.Slot2.Value)
                RF:InvokeServer("UnequipCard", Display.Slot3.Value)
            end
        })

        AV.b[3]:AddToggle("Auto Upgrade [Card]", {
            Title = "Auto Upgrade [Card]",
            Description = "Automatically upgrade all your equipped cards.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[3]:AddToggle("Auto Sell [Card]", {
            Title = "Auto Sell [Card]",
            Description = "Automatically sell all of the selected cards (rarity) not sell card equiping, lock.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })


        AV.b[4]:AddToggle("Auto Claim [Quest]", {
            Title = "Auto Claim [Quest]",
            Description = "Automatically claim all of the daily // weekly quests.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[4]:AddToggle("Auto Claim [Speed Raid]", {
            Title = "Auto Claim [Speed Raid]",
            Description = "Automatically claim all of the speedraid reward.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[4]:AddToggle("Auto Claim [Raid Token]", {
            Title = "Auto Claim [Raid Token]",
            Description = "Automatically claim daily raidtoken.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.b[5]:AddToggle("Enabled Dash No Cooldown", {
            Title = "Enabled Dash No Cooldown",
            Description = nil,
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                Display.No_DashCooldown.Value = v
            end
        })

        AV.b[5]:AddButton({
            Title = "Redeem All Code",
            Description = "Press the button to redeem all code.",
            Callback = function()
                if GameId ~= 7338881230 and GameId ~= 6938803436 and GameId ~= 7274690025 then return end
                if Notify["Code"] then Notify["Code"]:Close() Notify["Code"] = nil end
                local Code = {"3YEARS"}
                for i, v in ipairs(w.Leaderboards.MilestoneBoard.Center.Surface.ScrollingFrame:GetChildren()) do
                    if v:IsA("Frame") and v.MilestoneCode.Text ~= "LOCKED" then
                        RF:InvokeServer("RedeemPromoCode", v.MilestoneCode.Text)
                        table.insert(Code, v.MilestoneCode.Text)
                    end
                end
                RF:InvokeServer("RedeemPromoCode", "3YEARS")
                Notify["Code"] =
                Gui:Notify({
                    Title = "Successfully code redeemed",
                    Content = nil,
                    Show = false,
                    SubContent = table.concat(Code, "\n"),
                    Duration = 5
                })
            end
        })

        AV.b[5]:AddButton({
            Title = "Return to Lobby",
            Description = "Press the button to return to the lobby.",
            Callback = function()
                Window:Dialog({
                    Title = "Notify",
                    Content = "Do you want to teleport to the lobby?",
                    Buttons = {
                        {
                            Title = "Yes",
                            Callback = function()
                                game:GetService("TeleportService"):Teleport(6938803436)
                            end
                        },
                        {Title = "No"}
                    }
                })
            end
        })

        AV.c[1]:AddDropdown("Selected Assists", {
            Title = "Select Assist: ",
            Description = nil,
            Values = {
                "Assist1",
                "Assist2",
                "Fruit1",
                "Fruit2"
            },
            Multi = true,
            Default = {
                "Assist1",
                "Assist2",
                "Fruit1",
                "Fruit2"
            },
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                misc.skill = {a = true}
            end
        })

        AV.c[1]:AddDropdown("Selected Type [Attack]", {
            Title = "Select Type: ",
            Description = nil,
            Values = {
                "Remote",
                "Click"
            },
            Multi = false,
            Default = 1,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.c[1]:AddToggle("Auto Skill", {
            Title = "Auto Skill",
            Description = "Automatically skills on enemies.",
            Default = true,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.c[1]:AddToggle("Auto Attack", {
            Title = "Auto Attack",
            Description = "Automatically attack on enemies.",
            Default = true,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })


        Text["Character"] =
        AV.c[2]:AddParagraph({
            Title = "Character",
            Content = ""
        })

        if isfile(Files.."/Character Save.json") then
            pcall(function ()
                local X = h:JSONDecode(readfile(Files.."/Character Save.json"))
                Text["Character"]:SetDesc(X["Character1"].."\n"..X["Character2"].."\n"..X["Character3"])
                misc.character = {X["Character1"], X["Character2"], X["Character3"]}
            end)
        end


        AV.c[2]:AddDropdown("Selected Character", {
            Title = "Select Character: ",
            Description = nil,
            Values = misc.character or {},
            Multi = true,
            Default = {nil},
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                misc.swap = {}
                for x, o in pairs(v) do
                    if o == true then
                        table.insert(misc.swap,x)
                    end
                end
            end
        })

        AV.c[2]:AddToggle("Auto Equip [Character]", {
            Title = "Auto Equip [Character]",
            Description = "Automatically equip saved character.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.c[2]:AddToggle("Auto Swap [Character]", {
            Title = "Auto Swap [Character]",
            Description = "Automatically reset the character if not match x selected character.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.c[2]:AddButton({
            Title = "Save Character",
            Description = "Press the button to save your characters.",
            Callback = function()
                local X = {}
                X["Character1"] = Display.CharacterName.Value
                X["Character2"] = Display.AssistCharacterName1.Value
                X["Character3"] = Display.AssistCharacterName2.Value
                X["Character"] = LpUi.UniversalGui.LeftUIFrame.OwnHealthBarFrame.CharacterTriIcon.Image:split("rbxassetid://")[2]
                local O = {X["Character1"], X["Character2"], X["Character3"]}

                Gui:Notify({
                    Title = "Successfully character saved",
                    Content = nil,
                    Show = false,
                    SubContent = table.concat(O, "\n"),
                    Duration = 5
                })

                writefile(Files.."/Character Save.json",h:JSONEncode(X))
                Text["Character"]:SetDesc(table.concat(O, "\n"))
                Options["Selected Character"]:SetValues(O)
                Options["Selected Character"]:SetValue({
                    [Options["Selected Character"].Values[1]] = true,
                    [Options["Selected Character"].Values[2]] = true,
                    [Options["Selected Character"].Values[3]] = true
                })
                misc.character = {X["Character1"], X["Character2"], X["Character3"]}
            end
        })


        local function MakeCombo(x, o, d)
            x:AddDropdown(o .. " Skill One", {
                Title = "Skill One",
                Values = {"1", "2", "3", "4", "5"},
                Multi = false,
                Default = 1,
                Callback = function (v)
                    if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                end
            })

            x:AddDropdown(o .. " Skill Two", {
                Title = "Skill Two",
                Values = {"1", "2", "3", "4", "5"},
                Multi = false,
                Default = 2,
                Callback = function (v)
                    if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                end
            })

            x:AddDropdown(o .. " Skill Third", {
                Title = "Skill Third",
                Values = {"1", "2", "3", "4", "5"},
                Multi = false,
                Default = 3,
                Callback = function (v)
                    if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                end
            })

            x:AddDropdown(o .. " Skill Fourth", {
                Title = "Skill Fourth",
                Values = {"1", "2", "3", "4", "5"},
                Multi = false,
                Default = 4,
                Callback = function (v)
                    if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                end
            })

            x:AddDropdown(o .. " Skill Fifth", {
                Title = "Skill Fifth",
                Values = {"1", "2", "3", "4", "5"},
                Multi = false,
                Default = 5,
                Callback = function (v)
                    if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                end
            })

            x:AddSlider(o .. " Selected Distance",{
                Title = "Skill Distance: ",
                Description = "Choose the distance you want the " .. d .. " to skill on the enemy.",
                Default = 35,
                Min = 5,
                Max = 150,
                Rounding = 0,
                Callback = function (v)
                    if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                end
            })
        end

        MakeCombo(Tabs.d, "[C1]", "character1")
        MakeCombo(Tabs.e, "[C2]", "character2")
        MakeCombo(Tabs.f, "[C3]", "character3")

        AV.d[1]:AddInput("Webhook [URL]", {
            Title = "Webhook [URL]",
            Description = nil,
            Default = nil,
            Placeholder = "Url.",
            Numeric = false,
            Finished = false,
            Callback = function(v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.d[1]:AddColorpicker("Webhook [Color]", {
            Title = "Webhook [Color]",
            Description = "Choose the color of the webhook.",
            Default = Color3.fromRGB(25, 25, 25),
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.d[1]:AddToggle("Enabled Webhook [Notify]", {
            Title = "Enabled Webhook [Notify]",
            Description = "Send a notifaction to your discord when the game ends.",
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.d[1]:AddButton({
            Title = "Check Webhook",
            Description = "Press the button see if the webhook working.",
            Callback = function()
                if not string.find(Options["Webhook [URL]"].Value, "https://discord.com/api/webhooks") then return end
                local content = nil
                local Data = h:JSONEncode({
                    ["username"] = "Anime Dimensions Simulator : Notification",
                    ["avatar_url"] = "https://tr.rbxcdn.com/c4eb434ab38ef6770fcaa70357ffc105/150/150/Image/Webp",
                    content = nil,
                    embeds = {
                        {
                            ["title"] = nil,
                            ["color"] = tonumber(Func:HexColor(Options["Webhook [Color]"].Value, "0x")),
                            ["description"] = "`Working . . . .`",
                            ["footer"] = {
                                ["text"] = "Time: "..os.date("%c").."\nCredit: YT » @crazyday3693",
                                ["icon_url"] = "https://yt3.ggpht.com/yti/ANjgQV_KI8R3VhsnEhzYD0M1EJXUU29p0YC5gzrrhv8nWzA7j6s=s88-c-k-c0x00ffffff-no-rj"
                            },
                            ["thumbnail"] = {
                                ["url"] = "https://tr.rbxcdn.com/c4eb434ab38ef6770fcaa70357ffc105/150/150/Image/Webp",
                            }
                        }
                    }
                })
                local response = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or (request)
                response({Url = Options["Webhook [URL]"].Value, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = Data})
            end
        })

        AV.d[2]:AddParagraph({
            Title = "NOTE",
            Content = "How to get an Id?" .. Space .. "First step, open your Disco app, go to settings, go to advanced, make sure your developer mode is already on." .. Space .. "● PC: Click on the profile picture. After that, click to Copy ID." .. Space .. "● Mobile: Type something in the text field, then go to your profile and click on the three dots on the top right and click on Copy ID."
        })

        AV.d[2]:AddInput("Webhook [ID]", {
            Title = "Webhook [ID]",
            Description = nil,
            Default = nil,
            Placeholder = "number only.",
            Numeric = true,
            Finished = false,
            Callback = function(v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })


        AV.d[2]:AddDropdown("Selected Type [Webhook]", {
            Title = "Select Type: ",
            Description = nil,
            Values = {
                "Common",
                "Uncommon",
                "Rare",
                "Epic",
                "Legendar",
                "Mythic",
                "Divine",
                "Character"
            },
            Multi = true,
            Default = {
                "Mythic",
                "Divine",
                "Character"
            },
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
                misc.webhook = {a = true}
                for x, o in pairs(v) do
                    if o == true then
                        table.insert(misc.webhook, x)
                    end
                end
            end
        })

        AV.d[2]:AddToggle("Enabled Webhook [Ping]", {
            Title = "Enabled Webhook [Ping]",
            Description = nil,
            Default = false,
            Callback = function (v)
                if not a.loading and Options["Auto Save"].Value then Save:Save("Configs") end
            end
        })

        AV.d[2]:AddButton({
            Title = "How to get an Id?",
            Description = "Press the button to copy the link.",
            Callback = function()
                setclipboard(tostring("https://streamable.com/hzzd5f"))
                Gui:Notify({
                    Title = "Successfully link copied",
                    Content = nil,
                    Show = false,
                    SubContent = "https://streamable.com/hzzd5f.",
                    Duration = 4.5
                })
            end
        })


        Init:SetLibrary(Gui)
        Init:SetFolder(Files)
        Init:BuildInterfaceSection(Tabs.t)
        AV.f = Tabs.t:AddSection("Settings")

        AV.f:AddToggle("Auto Save", {
            Title = "Auto Save",
            Description = "Automatically saves all configuration settings.",
            Default = true,
            Callback = function (v)
                if not a.loading then Save:Save("Configs") end
            end
        })

        AV.f:AddButton({
            Title = "Reset all configs",
            Description = "Press the button to reset all configuration to default.",
            Callback = function()
                Window:Dialog({
                    Title = "Notify",
                    Content = "Do you want to reset all configuration?",
                    Buttons = {
                        {
                            Title = "Yes",
                            Callback = function()
                                local time = tick()
                                writefile(Files.."/settings/Configs.json",
                                [[
                                {"objects":[{"idx":"Auto Join [Boss Rush]","type":"Toggle","value":false},{"idx":"Enabled FriendsOnly","type":"Toggle","value":false},{"idx":"[C2] Skill Third","type":"Dropdown","mutli":false,"value":"3"},{"idx":"Auto Upgrade [Card]","type":"Toggle","value":false},{"idx":"[C2] Skill Fourth","type":"Dropdown","mutli":false,"value":"4"},{"idx":"[C3] Skill Fourth","type":"Dropdown","mutli":false,"value":"4"},{"idx":"Selected Type [Attack]","type":"Dropdown","mutli":false,"value":"Remote"},{"idx":"Auto Enemy Distance","type":"Toggle","value":true},{"idx":"Wave [End]","type":"Input","text":"10"},{"idx":"Selected Rarity","type":"Dropdown","mutli":true,"value":{"Uncommon":true,"Common":true}},{"idx":"[C1] Skill Two","type":"Dropdown","mutli":false,"value":"2"},{"idx":"[C1] Skill Third","type":"Dropdown","mutli":false,"value":"3"},{"idx":"Auto Join [Speed Raid]","type":"Toggle","value":false},{"idx":"Selected Type [Time]","type":"Dropdown","mutli":false,"value":"Minute"},{"idx":"Auto Sell [Card]","type":"Toggle","value":false},{"idx":"Webhook [ID]","type":"Input","text":""},{"idx":"Auto Attack","type":"Toggle","value":true},{"idx":"Auto Swap [Character]","type":"Toggle","value":false},{"idx":"Auto Safe","type":"Toggle","value":false},{"idx":"Selected Type [Webhook]","type":"Dropdown","mutli":true,"value":{"Mythic":true,"Character":true,"Divine":true}},{"idx":"Enabled Webhook [Ping]","type":"Toggle","value":false},{"idx":"Webhook [Color]","type":"Colorpicker","transparency":0,"value":"191919"},{"idx":"Selected Health","type":"Slider","value":"50"},{"idx":"Enabled Hardcore","type":"Toggle","value":false},{"idx":"[C1] Selected Distance","type":"Slider","value":"35"},{"idx":"[C3] Skill Two","type":"Dropdown","mutli":false,"value":"2"},{"idx":"Auto Claim [Raid Token]","type":"Toggle","value":false},{"idx":"Selected Raid","type":"Dropdown","mutli":false,"value":"Divine Guardian Raid"},{"idx":"[C1] Skill One","type":"Dropdown","mutli":false,"value":"1"},{"idx":"[C3] Selected Distance","type":"Slider","value":"35"},{"idx":"[C2] Skill Two","type":"Dropdown","mutli":false,"value":"2"},{"idx":"Auto Join [Normal]","type":"Toggle","value":false},{"idx":"Webhook [URL]","type":"Input","text":""},{"idx":"Selected Difficulty","type":"Dropdown","mutli":false,"value":"Easy"},{"idx":"Enabled Dodge Skill","type":"Toggle","value":true},{"idx":"Enabled Webhook [Notify]","type":"Toggle","value":false},{"idx":"[C1] Skill Fourth","type":"Dropdown","mutli":false,"value":"4"},{"idx":"Selected Time","type":"Slider","value":"20"},{"idx":"Auto Claim [Quest]","type":"Toggle","value":false},{"idx":"Auto Save","type":"Toggle","value":true},{"idx":"Auto Equip [Character]","type":"Toggle","value":false},{"idx":"Auto Claim [Speed Raid]","type":"Toggle","value":false},{"idx":"[C3] Skill Fifth","type":"Dropdown","mutli":false,"value":"5"},{"idx":"Selected Distance","type":"Slider","value":"6.5"},{"idx":"Auto Back to Lobby","type":"Toggle","value":false},{"idx":"Selected Type [Farm]","type":"Dropdown","mutli":false,"value":"Over"},{"idx":"Selected Mode [Farm]","type":"Dropdown","mutli":false,"value":"Bring Mode"},{"idx":"Enabled Dash No Cooldown","type":"Toggle","value":false},{"idx":"Selected Character","type":"Dropdown","mutli":true,"value":[]},{"idx":"Auto Retry","type":"Toggle","value":false},{"idx":"Auto Join [Raid]","type":"Toggle","value":false},{"idx":"[C2] Skill Fifth","type":"Dropdown","mutli":false,"value":"5"},{"idx":"[C3] Skill Third","type":"Dropdown","mutli":false,"value":"3"},{"idx":"[C3] Skill One","type":"Dropdown","mutli":false,"value":"1"},{"idx":"Auto Join [Highnest]","type":"Toggle","value":false},{"idx":"[C2] Selected Distance","type":"Slider","value":"35"},{"idx":"Auto Reset [Infinite Mode]","type":"Toggle","value":false},{"idx":"[C2] Skill One","type":"Dropdown","mutli":false,"value":"1"},{"idx":"[C1] Skill Fifth","type":"Dropdown","mutli":false,"value":"5"},{"idx":"Auto Join [Raid Challenge]","type":"Toggle","value":false},{"idx":"Selected Dimension","type":"Dropdown","mutli":false,"value":"Titan Dimension"},{"idx":"Selected Type [Boss Rush]","type":"Dropdown","mutli":false,"value":"Free"},{"idx":"Auto Skill","type":"Toggle","value":true},{"idx":"Auto Equip [Card]","type":"Toggle","value":false},{"idx":"Selected Assists","type":"Dropdown","mutli":true,"value":{"Assist2":true,"Fruit1":true,"Fruit2":true,"Assist1":true}},{"idx":"Auto Join [Infinite Mode]","type":"Toggle","value":false}]}
                                ]])
                                task.wait(0.35)
                                do
                                    Save:Load("Configs")
                                end
                                local q = tick() - time
                                local i = math.floor(q) % 60
                                local f = (q % 1) * 1000
                                local text = string.format("%.02d.%.03d", i, f)
                                Gui:Notify({
                                    Title = "Successfully reseted configs",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "Loaded Config In "..(text)..".s",
                                    Duration = 5
                                })
                            end
                        },
                        {
                            Title = "No",
                            Callback = function()
                               -- setclipboard(tostring(readfile(Files.."/settings/Configs.json")))
                            end
                        }
                    }
                })
            end
        })

        do
            Save:SetLibrary(Gui)
            Save:SetFolder(Files)
            Save:IgnoreThemeSettings()
            Window:SelectTab(1)
            Window:Minimize()
            Save:Load("Configs")

            if not misc.rarity.a then
                Options["Selected Rarity"]:SetValue({
                    Common = true,
                    Uncommon = true
                })
            end
            if not misc.skill.a then
                Options["Selected Assists"]:SetValue({
                    Assist1 = true,
                    Assist2 = true,
                    Fruit1 = true,
                    Fruit2 = true
                })
            end
            if not misc.webhook.a then
                Options["Selected Type [Webhook]"]:SetValue({
                    Mythic = true,
                    Divine = true,
                    Character = true
                })
            end
            a.loading = false
        end

        do
            local q = tick() - Time
            local i = math.floor(q) % 60
            local f = (q % 1) * 1000
            local text = string.format("%.02d.%.03d", i, f)
            Notify["Hide"] =
            Gui:Notify({
                Title = "Successfully loaded",
                Content = "Loaded Ui In "..(text)..".s Press "..(Options["MenuKeybind"].Value or Gui.MinimizeKey.Name).." For Show, Hide Ui",
                SubContent = nil,
                Show = false,
                Duration = 9e9 * 9e9
            })
        end

        AddSignal["Hide"] =
        Window.Root:GetPropertyChangedSignal "Visible":Connect(function ()
            Notify["Hide"]:Close()
            AddSignal["Hide"]:Disconnect()
        end)

        task.spawn(
            function ()
                while true do
                    if Gui.Unloaded then
                        pcall(function ()
                            for i = 1, #AddSignal do
                                for x, v in pairs(AddSignal[i]) do
                                    if v then
                                        v:Disconnect()
                                    end
                                end
                            end
                            for x, o in pairs(AddSignal) do
                                if type(o) == "userdata" then
                                    AddSignal[x]:Disconnect()
                                end
                            end
                            misc.playing = 0
                            a.bring1 = false
                            a.bring2 = false
                            a.dodge = false
                            a.safe = false
                            a.dead = false
                            a.spawn = false
                            a.backlobbytime = false
                            SetHead(1)
                            if Lp.Character.Humanoid.PlatformStand == true then Lp.Character.Humanoid.PlatformStand = false end
                            local q = Lp.Character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity")
                            if q then q:Destroy() end
                        end)
                        break
                    end
                    wait()
                end
            end
        )

        if GameMap == "CharacterTest" then
            return
            Gui:Notify({
                Title = "Failed to load function",
                Content = nil,
                Show = false,
                SubContent = "Unknown GameMap.",
                Duration = 9e9 * 9e9
            })
        elseif GameMap == "Infinite Mode" then
            misc.speed = 60
            misc.wait = 0.585
        end
        task.wait(1)

        local function EnabledFarm()
            if (not Options["Auto Join [Normal]"].Value and not Options["Auto Join [Highnest]"].Value and not Options["Auto Join [Raid]"].Value and not Options["Auto Join [Raid Challenge]"].Value and not Options["Auto Join [Speed Raid]"].Value and not Options["Auto Join [Boss Rush]"].Value and not Options["Auto Join [Infinite Mode]"].Value ) or Gui.Unloaded then
                return false
            else
                return true
            end
        end

        local function Bar(x)
            if x == "boss" then
                return LpUi.BattleGui.CenterUIFrame.BossHealthFrame.Visible
            elseif x == "res" then
                for i,v in ipairs(LpUi.UniversalGui.UniversalCenterUIFrame.RaidResultUI.Frame:GetDescendants()) do
                    if v.Name == "RaidRewardGridFrame" and v.Parent.Name == "Shadow" then
                        return v
                    end
                end
            end
        end

        local function info(x)
            if x == "exp" then
                return LpUi.UniversalGui.LeftUIFrame.OwnHealthBarFrame.Exp.Text:split("%")[1].."/100%"
            elseif x == "bossrush" then
                return LpUi.MainGui.CenterUIFrame.BossRushShop.BossRushShopCurrencyCounter.BossRushShopCurrencyAmount.Text
            elseif x == "raidtoken" then
                return LpUi.MainGui.CenterUIFrame.Shop.Frame.ShopRaidTokenCounter.ShopRaidTokenAmount.Text
            elseif x == "traittoken" then
                return LpUi.MainGui.CenterUIFrame.CharacterTraitFrame.Frame.TraitGearChangeTrait.Text
            elseif x == "speedraid" then
                return LpUi.MainGui.CenterUIFrame.RaidShop.SpeedRaidShopUIHolder.SpeedRaidShopCurrencyCounter.SpeedRaidShopCurrencyAmount.Text
            elseif x == "gold" then
                for i,v in ipairs(LpUi.UniversalGui.LeftUIFrame.OwnHealthBarFrame:GetDescendants()) do
                    if v.Name == "Gold" and v:IsA("TextLabel") then
                        return v.Text
                    end
                end
            elseif x == "gem" then
                for i,v in ipairs(LpUi.UniversalGui.LeftUIFrame.OwnHealthBarFrame:GetDescendants()) do
                    if v.Name == "Gem" and v:IsA("TextLabel") then
                        return v.Text
                    end
                end
            end
        end

        local function CharacterInfo()
            local q = {}
            for i,v in ipairs(LpUi.MainGui.CenterUIFrame.SpeedRaidCharacterSelector.Shade.SpeedRaidCharacterInventoryScrollingFrame:GetChildren()) do
                if v:IsA("ImageButton") and v.CharacterImage.ImageTransparency == 0 then
                    table.insert(q,v.Name)
                end
            end
            return q
        end

        local function CardInfo(x)
            if x == "slot" then
                if (Display.CardsOwned.Value >= 3) and (Display.Slot1.Value == "" or Display.Slot2.Value == "" or Display.Slot3.Value == "") then
                    return true
                elseif (Display.CardsOwned.Value == 2) and (Display.Slot1.Value == "" or Display.Slot2.Value == "") then
                    return true
                elseif Display.CardsOwned.Value == 1 and Display.Slot1.Value == "" then
                    return true
                else
                    return false
                end
            elseif x == "best" then
                local q = {}
                for i, v in ipairs(LpUi.MainGui.CenterUIFrame.Inventory.Frame.CardInventoryFrame.CardInventoryScrollingFrame:GetChildren()) do
                    if v:IsA("ImageButton") and v.LayoutOrder >= 1 then
                        table.insert(q, {
                            ["name"] = v.Name,
                            ["lvl"] = v.LayoutOrder
                        })
                    end
                end
                table.sort(q ,function(i ,v)
                    return i["lvl"] < v["lvl"]
                end)
                return {q[1]["name"] , q[2]["name"], q[3]["name"]}
            end
        end

        local function Flame()
            if Options["Enabled Dodge Skill"].Value then
                for i,v in ipairs(w.Folders.Debris:GetChildren()) do
                    if v.Name == "FlameTrailIgnore" then
                        return true
                    end
                end
            else
                return false
            end
        end

        local function n1(x, o)
            if x == "stage" then
                return Lp.RespawnLocation.Name:split("SpawnLocation")[2]
            elseif x == "dist" then
                return (Lp.Character.HumanoidRootPart.Position - o.Position).magnitude
            end
        end

        local function mob1(x)
            local dist, thing = math.huge, false
            for i,v in ipairs(w.Folders.Monsters:GetChildren()) do
                if x == "all" then
                    if v:FindFirstChildOfClass("BillboardGui") and tonumber(v.EnemyHealthBarGui.HealthText.Text) > 0 then
                        local mag = (Lp.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
                        if mag < dist then
                            dist = mag
                            thing = v
                        end
                    end
                elseif x == "boss" then
                    if v:FindFirstChildOfClass("BillboardGui") and tonumber(v.EnemyHealthBarGui.HealthText.Text) > 0 and v.EnemyHealthBarGui.Enabled == false then
                        local mag = (Lp.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
                        if mag < dist then
                            dist = mag
                            thing = v
                        end
                    end
                elseif x == "bring" then
                    if v:FindFirstChildOfClass("BillboardGui") and tonumber(v.EnemyHealthBarGui.HealthText.Text) > 0 and v.Head.Transparency ~= 10 then
                        local mag = (Lp.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
                        if mag < dist then
                            dist = mag
                            thing = v
                        end
                    end
                end
            end
            return thing
        end

        local function mob2(x)
            if x == "mob" then
                for i,v in ipairs(w.Folders.Monsters:GetChildren()) do
                    if v:FindFirstChildOfClass("BillboardGui") and tonumber(v.EnemyHealthBarGui.HealthText.Text) > 0 then
                        return v
                    end
                end
            else
                local q = {}
                for i,v in ipairs(w.Folders.Monsters:GetChildren()) do
                    if v:FindFirstChildOfClass("BillboardGui") and tonumber(v.EnemyHealthBarGui.HealthText.Text) > 0 then
                        q = {"1"}
                    end
                end
                return #q
            end
        end

        local function cricle()
            local dist, thing = 175, false
            local x = string.find
            for i,v in ipairs(w.GameMap:FindFirstChildOfClass("Model"):GetChildren()) do
                if x(v.Name, "Teleport") and not x(v.Name, "Destination") then
                    local o = (Lp.Character.HumanoidRootPart.Position - v.Position).magnitude
                    if (o < dist) and (n1("dist", mob1("all").HumanoidRootPart) > dist) then
                        misc.playing = 0
                        dist = o
                        thing = v
                    end
                end
            end
            return thing
        end

        local function animations(x)
            local o = {}
            if Lp.Character.Humanoid.WalkSpeed <= 0 or Lp.Character.HumanoidRootPart.Anchored then
                o = {"1"}
            else
                for k, g in ipairs(Lp.Character.Humanoid:GetPlayingAnimationTracks()) do
                    if g.Name == x then
                        o = {"1"}
                    end
                end
            end
            return #o
        end

        task.spawn(
            function ()
                AddSignal.h(
                    Lp:GetPropertyChangedSignal("RespawnLocation"):Connect(function ()
                        misc.playing = 0
                        a.spawn = true
                        task.delay(0.5, function ()
                            misc.playing = 0
                            a.spawn = false
                        end)
                    end),
                    w.Folders.Debris.ChildAdded:Connect(function (x)
                        pcall(function ()
                            if not Options["Enabled Dodge Skill"].Value or a.bring1 or a.bring2 or a.safe or mob2("none") == 0 or Gui.Unloaded then return end
                            if (x.Name == "FlameTrail" or table.find({"telegraph"}, x.Name:lower())) and not x:IsA("Model") then
                                local q, o = "Ignore", 0.275
                                if x.Name == "FlameTrail" then
                                    task.wait(0.0375)
                                    if x:FindFirstChild("P1") == nil then return end
                                    if x:FindFirstChild("P1") and x.P1.Texture ~= "rbxassetid://6169516856" then return end
                                    q = "FlameTrailIgnore"
                                end
                                if Bar("boss") then
                                    o = 0.175
                                end
                                local y = x:Clone()
                                local f = math.clamp(3.35,0,10)
                                local i = x.Size + Vector3.new(f,100,f + 3.35)
                                y.Size = Vector3.new(0,0,x.Size.Z)
                                if x.ClassName == "MeshPart" then
                                    y.Size = Vector3.new(0,0,100)
                                    i = x.Size + Vector3.new(f,f,100)
                                end
                                t:Create(y, TweenInfo.new(o), {Size = i}):Play()
                                y.CFrame = x.CFrame + Vector3.new(0,0,0)
                                y.Anchored = true
                                y.Transparency = 1
                                y.CanCollide = true
                                y.Name = q
                                y.Parent = x.Parent
                                repeat task.wait() until not x.Parent or not Options["Enabled Dodge Skill"].Value or a.bring1 or a.bring2 or a.safe or mob2("none") == 0 or Gui.Unloaded
                                task.delay(0.0355 ,function ()
                                    y:Destroy()
                                end)
                            end
                        end)
                    end)
                )
                function Touch(x)
                    pcall(function ()
                        local q = x:WaitForChild("HumanoidRootPart", 5)
                        if not q then
                            return
                        end

                        AddSignal["Touch"] = q.Touched:Connect(function (o)
                            if o.Name == "Ignore" or o.Name == "FlameTrailIgnore" then
                                a.dodge = true
                                repeat task.wait() if misc.tween then misc.tween:Cancel() end a.dodge = true until not o.Parent
                                a.dodge = false
                            end
                        end)
                    end)
                end
                function AddedCharacter(x)
                    local q = x:WaitForChild("Humanoid", 5)
                    if not q then
                        return
                    end

                    AddSignal["Deaded"] = q.Died:Connect(function ()
                        a.dead = true
                        if AddSignal["Touch"] then AddSignal["Touch"]:Disconnect() AddSignal["Touch"] = nil end
                        if AddSignal["Deaded"] then AddSignal["Deaded"]:Disconnect() AddSignal["Deaded"] = nil end

                        AddSignal["Added"] = Lp.CharacterAdded:Connect(function ()
                            task.wait(1)
                            misc.playing = 0
                            a.bring1 = false
                            a.bring2 = false
                            a.dodge = false
                            a.safe = false
                            a.dead = false
                            a.spawn = false
                            Touch(Lp.Character)
                            SetHead(1)
                            if AddSignal["Added"] then AddSignal["Added"]:Disconnect() AddSignal["Added"] = nil end
                        end)
                    end)
                end
                Lp.CharacterAdded:Connect(AddedCharacter)
                do
                    local q = Lp.Character or Lp.CharacterAdded:Wait()
                    if q then
                        Touch(q)
                        AddedCharacter(q)
                    end
                end
                if GameMap == "Infinite Mode" then
                    local q = LpUi.BattleGui.CenterUIFrame.WaveClearClearText
                    AddSignal.h(
                        q:GetPropertyChangedSignal("Text"):Connect(function ()
                            if q.Text:len() == 2 and q.Text.find(q.Text,"0") == 2 then
                                a.bring2 = false
                            elseif q.Text:len() == 3 and (q.Text.find(q.Text,"0") == 3 or q.Text.find(q.Text,"00")) then
                                a.bring2 = false
                            else
                                a.bring2 = true
                                task.delay(3.75, function ()
                                    a.bring2 = false
                                end)
                            end
                        end)
                    )
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        local q, f, x, cq = table.find({"Naruto", "Sasuke"}, Display.BattleCharacterName.Value), CFrame.new, CFrame.Angles, Display.BattleCharacterName.Value
                        if cq == Display.CharacterName.Value then
                            a.cq = "[C1]"
                        elseif cq == Display.AssistCharacterName1.Value then
                            a.cq = "[C2]"
                        elseif cq == Display.AssistCharacterName2.Value then
                            a.cq = "[C3]"
                        end
                        if Options["Auto Enemy Distance"].Value then
                            if q then
                                if Options["Selected Type [Farm]"].Value == "Over" then
                                    a.method = f(0,1.5,0) * x(math.rad(-90),0,0)
                                elseif Options["Selected Type [Farm]"].Value == "Under" then
                                    a.method = f(0,-1.5,0) * x(math.rad(90),0,0)
                                elseif Options["Selected Type [Farm]"].Value == "Front" then
                                    a.method = f(0,0,-1.5) * x(math.rad(0),1800,0)
                                elseif Options["Selected Type [Farm]"].Value == "Behind" then
                                    a.method = f(0,0,1.5)
                                end
                            else
                                if Bar("boss") then
                                    if mob1("boss").HumanoidRootPart.Size.Y >= 25 then
                                        a.Y1 = 2.5
                                        a.Y2 = - 2.5
                                    else
                                        a.Y1 = mob1("boss").Head.Size.Y + 5.75
                                        a.Y2 = - (mob1("boss").LowerTorso.Size.Y + mob1("boss").HumanoidRootPart.Size.Y + 5.55)
                                    end
                                    if Options["Selected Type [Farm]"].Value == "Over" then
                                        a.method = f(0,a.Y1,0) * x(math.rad(-90),0,0)
                                    elseif Options["Selected Type [Farm]"].Value == "Under" then
                                        a.method = f(0,a.Y2,0) * x(math.rad(90),0,0)
                                    elseif Options["Selected Type [Farm]"].Value == "Front" then
                                        a.method = f(0,0,-(mob1("boss").HumanoidRootPart.Size.Z + 4.5)) * x(math.rad(0),1800,0)
                                    elseif Options["Selected Type [Farm]"].Value == "Behind" then
                                        a.method = f(0,0,mob1("boss").HumanoidRootPart.Size.Z + 4.5)
                                    end
                                else
                                    if Options["Selected Type [Farm]"].Value == "Over" then
                                        a.method = f(0,(mob1("all").Head.Size.Y + 5.85),0) * x(math.rad(-90),0,0)
                                    elseif Options["Selected Type [Farm]"].Value == "Under" then
                                        a.method = f(0,-(mob1("all").LowerTorso.Size.Y + mob1("all").HumanoidRootPart.Size.Y + 5.35),0) * x(math.rad(90),0,0)
                                    elseif Options["Selected Type [Farm]"].Value == "Front" then
                                        a.method = f(0,0,-(mob1("all").HumanoidRootPart.Size.Z + 4.5)) * x(math.rad(0),1800,0)
                                    elseif Options["Selected Type [Farm]"].Value == "Behind" then
                                        a.method = f(0,0,mob1("all").HumanoidRootPart.Size.Z + 4.5)
                                    end
                                end
                            end
                        else
                            if Options["Selected Type [Farm]"].Value == "Over" then
                                a.method = f(0, Options["Selected Distance"].Value, 0) * x(math.rad(-90),0,0)
                            elseif Options["Selected Type [Farm]"].Value == "Under" then
                                a.method = f(0, -Options["Selected Distance"].Value, 0) * x(math.rad(90),0,0)
                            elseif Options["Selected Type [Farm]"].Value == "Front" then
                                a.method = f(0, 0, -Options["Selected Distance"].Value) * x(math.rad(0),1800,0)
                            elseif Options["Selected Type [Farm]"].Value == "Behind" then
                                a.method = f(0, 0, Options["Selected Distance"].Value)
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        if EnabledFarm() then
                            if not a.dodge then
                                if Lp.Character.Humanoid.PlatformStand == false then Lp.Character.Humanoid.PlatformStand = true end
                                Func:SetNoclip(false)
                            else
                                if Lp.Character.Humanoid.PlatformStand == true then Lp.Character.Humanoid.PlatformStand = false end
                                Func:SetNoclip(true)
                            end

                            if Lp.Character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity") == nil then
                                local q = Instance.new("BodyVelocity")
                                q.Parent =  Lp.Character.HumanoidRootPart
                                q.MaxForce = Vector3.new(3000, 3000, 3000)
                                q.Velocity = Vector3.new(0, 0, 0)
                            end

                            local BeenASecond, V3 = false, Vector3.new(0, 0, 0)
                            for _, v in ipairs(Lp.Character:GetDescendants()) do
                                if v.IsA(v, "BasePart") then
                                    v.Velocity, v.RotVelocity = V3, V3
                                end
                            end

                            if a.bring1 and mob1("bring") and n1("dist", mob1("bring").HumanoidRootPart) <= 18.75 then
                                for i,v in ipairs(w.Folders.Monsters:GetChildren()) do
                                    if v:FindFirstChildOfClass("BillboardGui") and v:FindFirstChild("Head") and v.Head.Transparency ~= 10 then
                                        if (Lp.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude <= 33.25 then
                                            v.Head.Transparency = 10
                                        end
                                    end
                                end
                            end
                        else
                            if Lp.Character.Humanoid.PlatformStand == true then Lp.Character.Humanoid.PlatformStand = false end
                            local q = Lp.Character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity")
                            if q then q:Destroy() end
                            a.bring1 = false
                            a.bring2 = false
                            misc.playing = 0
                            SetHead(1)
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        local q, f = LpUi.UniversalGui.UniversalCenterUIFrame.ResultUI, firesignal
                        if Options["Auto Retry"].Value and q.Visible and q.Frame.RetryDungeonButton.Visible then
                            if Options["Auto Join [Boss Rush]"].Value and GameMap == "Boss Rush" then
                                if Options["Selected Type [Boss Rush]"].Value == "Free" and Display.BossRushFreeEntry.Value >= 1 then
                                    f(q.Frame.RetryDungeonButton.MouseButton1Down)
                                elseif Options["Selected Type [Boss Rush]"].Value ~= "Free" and tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) >= 1 then
                                    f(q.Frame.RetryDungeonButton.MouseButton1Down)
                                else
                                    f(q.Frame.LeaveDungeonButton.MouseButton1Down)
                                end
                            else
                                if tonumber(n1("stage")) > 1 or string.find(GameMap,"Dimension") then
                                    f(q.Frame.RetryDungeonButton.MouseButton1Down)
                                else
                                    f(q.Frame.LeaveDungeonButton.MouseButton1Down)
                                end
                            end
                        else
                            if q.Visible then
                                f(q.Frame.LeaveDungeonButton.MouseButton1Down)
                            end
                        end

                        if EnabledFarm() and cricle() and not a.dead then
                            Tween(cricle())
                            misc.tween:Play()
                            misc.tween.Completed:Wait()
                        end

                        if Bar("boss") then
                            for i, v in ipairs(w.Folders.Monsters:GetChildren()) do
                                if v:FindFirstChildOfClass("BillboardGui") and v.EnemyHealthBarGui.Enabled then
                                    v:FindFirstChildOfClass("BillboardGui"):Destroy()
                                end
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if Gui.Unloaded or a.finished1 then break end
                    pcall(function ()
                        if Options["Auto Join [Raid]"].Value and Lvl.Value >= 15 and tonumber(os.date("!*t").min) <= 8 then
                            a.raid = true
                            if not GameMap.find(GameMap,"Raid") and GameMap ~= "Infinite Mode" and GameId ~= 7338881230 and GameId ~= 7274690025 and GameId ~= 6938803436 then
                                Gui:Notify({
                                    Title = "Auto Join [Raid]",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "Raid has Opened. \nTeleporting In 5 Seconds.",
                                    Duration = 5
                                })
                                a.finished1 = true
                                task.delay(5, function ()
                                    repeat
                                        game:GetService("TeleportService"):Teleport(7338881230)
                                        wait(1)
                                    until a.teleporting
                                end)
                            end
                        else
                            a.raid = false
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        local q , f= LpUi.UniversalGui.LeftUIFrame.OwnHealthBarFrame.HealthAmount.Text , Lp.Character.Head.PlayerHealthBarGui.HealthText.Text:split("/")[2]
                        if Options["Auto Safe"].Value and EnabledFarm() and not a.dead then
                            if tonumber(q) <= tonumber(Options["Selected Health"].Value * (f / 100)) then
                                misc.playing = 0
                                a.bring1 = false
                                a.bring2 = false
                                SetHead(1)
                                a.safe = true
                                Tween(w.Folders.SpawnPoints[Lp.RespawnLocation.Name], CFrame.new(0, 70, 0))
                                misc.tween:Play()
                            else
                                a.safe = false
                            end
                        else
                            if a.safe then
                                misc.playing = 0
                                a.bring1 = false
                                a.bring2 = false
                                SetHead(1)
                                a.safe = false
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        local q = Lp.Character.HumanoidRootPart
                        if EnabledFarm() and Bar("boss") and mob1("boss") and not cricle() and not Flame() and not q.Anchored and not a.safe and not a.dead and not a.dodge then
                            repeat
                                a.bring1 = false
                                a.bring2 = false
                                misc.playing = 0
                                Tween(mob1("boss").HumanoidRootPart, a.method)
                                misc.tween:Play()
                                task.wait(misc.wait)
                            until not mob1("boss") or not EnabledFarm() or not Bar("boss") or cricle() or Flame() or q.Anchored or a.safe or a.dodge or a.dead or Gui.Unloaded
                            misc.tween:Cancel()
                        end
                    end)
                    task.wait()
                end
            end
        )


        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or GameMap == "Infinite Mode" or Gui.Unloaded then break end
                    pcall(function ()
                        local q, f = Lp.Character.HumanoidRootPart, CFrame.new
                        if EnabledFarm() and not Bar("boss") and not cricle() and not a.safe and not a.dead then
                            if Options["Selected Mode [Farm]"].Value == "Bring Mode" then
                                if mob1("bring") then
                                    repeat
                                        a.bring1 = true
                                        Tween(mob1("bring").HumanoidRootPart, f(0,15,0))
                                        misc.tween:Play()
                                        task.wait()
                                    until not mob1("bring") or not EnabledFarm() or Bar("boss") or cricle() or a.safe or a.dead or a.spawn or Gui.Unloaded
                                else
                                    if misc.playing == 0 and mob2("mob") then
                                        a.bring1 = true
                                        Tween(mob2("mob").HumanoidRootPart, f(0,40,0))
                                        misc.tween:Play()
                                        misc.tween.Completed:Wait()
                                        task.wait(1)
                                        task.delay(1.25 ,function ()
                                            misc.playing = 1
                                        end)
                                    elseif misc.playing == 1 and mob1("all") and not a.dodge and not q.Anchored then
                                        repeat
                                            a.bring1 = false
                                            Tween(mob1("all").HumanoidRootPart, a.method)
                                            misc.tween:Play()
                                            task.wait()
                                        until misc.playing ~= 1 or not mob1("all") or not EnabledFarm() or Bar("boss") or cricle() or q.Anchored or a.safe or a.dodge or a.dead or Gui.Unloaded
                                        misc.tween:Cancel()
                                    end
                                end
                            else
                                if mob1("all") and not a.dodge and not q.Anchored then
                                    repeat
                                        Tween(mob1("all").HumanoidRootPart, a.method)
                                        misc.tween:Play()
                                        task.wait()
                                    until not mob1("all") or not EnabledFarm() or Bar("boss") or cricle() or q.Anchored or a.safe or a.dodge or a.dead or Gui.Unloaded
                                    misc.tween:Cancel()
                                end
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or GameMap ~= "Infinite Mode" or Gui.Unloaded then break end
                    pcall(function ()
                        local q, f = Lp.Character.HumanoidRootPart, CFrame.new
                        if EnabledFarm() and not Bar("boss") and not a.dead and not a.safe then
                            if a.bring2 then
                                Tween(w.Folders.SpawnPoints.SpawnLocation1, f(0,32.5,0))
                                misc.tween:Play()
                            elseif not a.bring2 and mob1("all") and not a.dodge and not q.Anchored then
                                repeat
                                    Tween(mob1("all").HumanoidRootPart, a.method)
                                    misc.tween:Play()
                                    task.wait(0.595)
                                until not EnabledFarm() or Bar("boss") or not mob1("all") or n1("none") == 0 or a.safe or a.dodge or a.dead or q.Anchored or Gui.Unloaded
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        if not Options["Auto Skill"].Value or animations("Animation") >= 1 or not mob1("all") or a.bring1 or a.bring2 or a.dead or a.safe then return end
                        if EnabledFarm() and n1("dist",Func:ObjectGet(mob1("all"))) <= Options[a.cq .. " Selected Distance"].Value then
                            local q ,f = LpUi.UniversalGui.UniversalCenterUIFrame.SlotsHolder, "rbxassetid://6797200424"
                            if q["Skill" .. Options[a.cq .. " Skill One"].Value].Visible and q["Skill" .. Options[a.cq .. " Skill One"].Value].Image ~= f then
                                repeat
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},tonumber(Options[a.cq .. " Skill One"].Value))
                                    task.wait(0.125)
                                until animations("Animation") >= 1 or q["Skill" .. Options[a.cq .. " Skill One"].Value].Image == f or Gui.Unloaded
                            end
                            if q["Skill" .. Options[a.cq .. " Skill Two"].Value].Visible and q["Skill" .. Options[a.cq .. " Skill One"].Value].Image == f and q["Skill" .. Options[a.cq .. " Skill Two"].Value].Image ~= f then
                                repeat
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},tonumber(Options[a.cq .. " Skill Two"].Value))
                                    task.wait(0.125)
                                until animations("Animation") >= 1 or q["Skill" .. Options[a.cq .. " Skill Two"].Value].Image == f or Gui.Unloaded
                            end
                            if q["Skill" .. Options[a.cq .. " Skill Third"].Value].Visible and q["Skill" .. Options[a.cq .. " Skill Two"].Value].Image == f and q["Skill" .. Options[a.cq .. " Skill Third"].Value].Image ~= f then
                                repeat
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},tonumber(Options[a.cq .. " Skill Third"].Value))
                                    task.wait(0.125)
                                until animations("Animation") >= 1 or q["Skill" .. Options[a.cq .. " Skill Third"].Value].Image == f or Gui.Unloaded
                            end
                            if q["Skill" .. Options[a.cq .. " Skill Fourth"].Value].Visible and q["Skill" .. Options[a.cq .. " Skill Third"].Value].Image == f and q["Skill" .. Options[a.cq .. " Skill Fourth"].Value].Image ~= f then
                                repeat
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},tonumber(Options[a.cq .. " Skill Fourth"].Value))
                                    task.wait(0.125)
                                until animations("Animation") >= 1 or q["Skill" .. Options[a.cq .. " Skill Fourth"].Value].Image == f or Gui.Unloaded
                            end
                            if q["Skill" .. Options[a.cq .. " Skill Fifth"].Value].Visible and q["Skill" .. Options[a.cq .. " Skill Fourth"].Value].Image == f and q["Skill" .. Options[a.cq .. " Skill Fifth"].Value].Image ~= f then
                                repeat
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},tonumber(Options[a.cq .. " Skill Fifth"].Value))
                                    task.wait(0.125)
                                until animations("Animation") >= 1 or q["Skill" .. Options[a.cq .. " Skill Fifth"].Value].Image == f or Gui.Unloaded
                            end
                        end
                    end)
                    task.wait(0.135)
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        if not Options["Auto Attack"].Value or animations("Animation") >= 1 or not mob1("all") or a.bring1 or a.bring2 or a.dead or a.safe then return end
                        if EnabledFarm() and n1("dist",Func:ObjectGet(mob1("all"))) <= 11.5 then
                            if Options["Selected Type [Attack]"].Value == "Remote" then
                                local q = Lp.Character
                                if q:FindFirstChild("Bow") or (q:FindFirstChild("Gun1") and q:FindFirstChild("Gun2")) or (q:FindFirstChild("Staff") and q.Staff:FindFirstChild("EssentialWeld") and q.Staff.EssentialWeld.C1.X <= - 0.038) then
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position),["combo"] = 3},"BasicAttack")
                                else
                                    RE:FireServer("UseSkill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position),["attackNumber"] = 4},"BasicAttack")
                                end
                            else
                                b:CaptureController()
                                b:Button1Down(Vector2.new(1200,672))
                            end
                        end
                    end)
                    task.wait(0.185)
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        if not Options["Auto Skill"].Value or not mob1("all") or a.bring1 or a.bring2 or a.dead or a.safe then return end
                        if EnabledFarm() and n1("dist",Func:ObjectGet(mob1("all"))) <= Options[a.cq .. " Selected Distance"].Value then
                            local q ,f = LpUi.UniversalGui.UniversalCenterUIFrame.SlotsHolder, "rbxassetid://6797200424"
                            for i,v in pairs(Options["Selected Assists"].Value) do
                                if i and v == true then
                                    if q["Skill"..i].Visible and q["Skill"..i].Image ~= f and q["Skill"..i].SkillName.Text ~= "None" then
                                        if string.find(i,"1") then
                                            RE:FireServer("Use"..i:split("1")[1].."Skill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},1)
                                        elseif string.find(i,"2") then
                                            RE:FireServer("Use"..i:split("2")[1].."Skill",{["hrpCFrame"] = CFrame.new(mob1("all").HumanoidRootPart.Position)},2)
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then break end
                    pcall(function ()
                        if Options["Auto Reset [Infinite Mode]"].Value and GameMap == "Infinite Mode" and tonumber(LpUi.BattleGui.CenterUIFrame.WaveClearClearText.Text) >= tonumber(Options["Wave [End]"].Value) and not LpUi.UniversalGui.UniversalCenterUIFrame.ResultUI.Visible then
                            Lp.Character.Humanoid.Health = 0
                        end
                        if Options["Auto Swap [Character]"].Value and #misc.character >= 1 then
                            local q ,f ,i , l =
                            Display.CharacterName,
                            Display.AssistCharacterName1,
                            Display.AssistCharacterName2,
                            Display.BattleCharacterName
                            if q.Value == misc.character[1] and f.Value == misc.character[2] and i.Value == misc.character[3] then
                                if not table.find(misc.swap, l.Value) then
                                    Lp.Character.Humanoid.Health = 0
                                end
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if a.backlobbytime or Gui.Unloaded then break end
                    pcall(function ()
                        local q ,f, i = isfile, readfile, writefile
                        if q(Files .. "/Timer.json") then
                            local x = f(Files .. "/Timer.json")
                            if not string.find(x,"H") or not string.find(x,"M") or not string.find(x,"S")  then
                                i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                            else
                                local v = h:JSONDecode(x)
                                if not tonumber(v["H"]) or not tonumber(v["M"]) or not tonumber(v["S"]) then
                                    i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                                end
                                local text = string.format("%.02d:%.02d:%.02d", v["H"], v["M"], v["S"])
                                Text["Time"]:SetTitle("TIme: "..text)
                                if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or GameMap.find(GameMap,"Raid") or GameMap == "Infinite Mode" or a.backlobbytime or Gui.Unloaded then return end
                                if Options["Auto Back to Lobby"].Value then
                                    v["S"] = v["S"] + 1

                                    if v["S"] >= 60 then
                                        v["S"] = 0
                                        v["M"] = v["M"] + 1
                                    elseif v["M"] >= 60 then
                                        v["M"] = 0
                                        v["H"] = v["H"] + 1
                                    elseif v["H"] > 60 then
                                        i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                                    end

                                    i(Files.."/Timer.json", h:JSONEncode(v))

                                    if Options["Selected Type [Time]"].Value == "Second" and (v["H"] > 0 or v["M"] > 0 or v["S"] >= Options["Selected Time"].Value) then
                                        Gui:Notify({
                                            Title = "Auto Back To Lobby [Time]",
                                            Content = nil,
                                            Show = false,
                                            SubContent = "Timewast: " ..(text).. ".\nTeleporting In 5 Seconds.",
                                            Duration = 5
                                        })
                                        a.backlobbytime = true
                                        task.delay(
                                            5, function ()
                                            task.defer(
                                                function ()
                                                    repeat
                                                        i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                                                        Text["Time"]:SetTitle("TIme: 00:00:00")
                                                        game:GetService("TeleportService"):Teleport(6938803436)
                                                        wait(1)
                                                    until a.teleporting or Gui.Unloaded
                                                end
                                            )
                                        end
                                    )
                                    elseif Options["Selected Type [Time]"].Value == "Minute" and (v["H"] > 0 or v["M"] >= Options["Selected Time"].Value) then
                                        Gui:Notify({
                                            Title = "Auto Back To Lobby [Time]",
                                            Content = nil,
                                            Show = false,
                                            SubContent = "Timewast: " ..(text).. ".\nTeleporting In 5 Seconds.",
                                            Duration = 5
                                        })
                                        a.backlobbytime = true
                                        task.delay(
                                            5, function ()
                                            task.defer(
                                                function ()
                                                    repeat
                                                        i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                                                        Text["Time"]:SetTitle("TIme: 00:00:00")
                                                        game:GetService("TeleportService"):Teleport(6938803436)
                                                        wait(1)
                                                    until a.teleporting or Gui.Unloaded
                                                end
                                            )
                                        end
                                    )
                                    elseif Options["Selected Type [Time]"].Value == "Hour" and v["H"] >= Options["Selected Time"].Value then
                                        Gui:Notify({
                                            Title = "Auto Back To Lobby [Time]",
                                            Content = nil,
                                            Show = false,
                                            SubContent = "Timewast: " ..(text).. ".\nTeleporting In 5 Seconds.",
                                            Duration = 5
                                        })
                                        a.backlobbytime = true
                                        task.delay(
                                            5, function ()
                                            task.defer(
                                                function ()
                                                    repeat
                                                        i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                                                        Text["Time"]:SetTitle("TIme: 00:00:00")
                                                        game:GetService("TeleportService"):Teleport(6938803436)
                                                        wait(1)
                                                    until a.teleporting or Gui.Unloaded
                                                end
                                            )
                                        end
                                    )
                                    end
                                end
                            end
                        else
                            i(Files.."/Timer.json",h:JSONEncode({["H"] = 0, ["M"] = 0, ["S"] = 0}))
                        end
                    end)
                    task.wait(1)
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if (GameId ~= 7338881230 and GameId ~= 6938803436 and GameId ~= 7274690025) or a.shadownraid or Gui.Unloaded then break end
                    pcall(function ()
                        if Options["Auto Equip [Character]"].Value then
                            local q, f = isfile, readfile
                            if not q(Files.."/Character Save.json") or (q(Files.."/Character Save.json") and not string.find(f(Files.."/Character Save.json"),"Character")) then return end
                            local x , o, i, v =
                                Display.CharacterName,
                                Display.AssistCharacterName1,
                                Display.AssistCharacterName2,
                                h:JSONDecode(f(Files.."/Character Save.json"))

                            if x.Value ~= v["Character1"] or o.Value ~= v["Character2"] or i.Value ~= v["Character3"] then
                                repeat
                                    a.eq = true
                                    RF:InvokeServer("EquipCharacter",v["Character1"])
                                    RF:InvokeServer("EquipCharacterAssist",v['Character2'],1)
                                    RF:InvokeServer("EquipCharacterAssist",v['Character3'],2)
                                    task.wait()
                                until (x.Value == v["Character1"] and o.Value == v["Character2"] and i.Value == v["Character3"]) or Gui.Unloaded
                                a.eq = false
                                LpUi.UniversalGui.LeftUIFrame.OwnHealthBarFrame.CharacterTriIcon.Image = "rbxassetid://"..v["Character"]
                                Gui:Notify({
                                    Title = "Successfully character equipped",
                                    Content = v["Character1"].."\n"..v["Character2"].."\n"..v["Character3"],
                                    Show = false,
                                    SubContent = nil,
                                    Duration = 3
                                })
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )


        task.spawn(
            function ()
                while true do
                    if (GameId ~= 7338881230 and GameId ~= 6938803436 and GameId ~= 7274690025) or Gui.Unloaded then break end
                    pcall(function ()
                        if Options["Auto Equip [Card]"].Value and CardInfo("slot") == true then
                            if Display.Slot1.Value ~= "" then RF:InvokeServer("UnequipCard", Display.Slot1.Value) end
                            if Display.Slot2.Value ~= "" then RF:InvokeServer("UnequipCard", Display.Slot2.Value) end
                            if Display.Slot3.Value ~= "" then RF:InvokeServer("UnequipCard", Display.Slot3.Value) end
                            repeat
                                RF:InvokeServer("EquipCard", CardInfo("best")[1])
                                RF:InvokeServer("EquipCard", CardInfo("best")[2])
                                RF:InvokeServer("EquipCard", CardInfo("best")[3])
                                task.wait()
                            until not Options["Auto Equip [Card]"].Value or CardInfo("slot") == false or Gui.Unloaded
                        end

                        if Options["Auto Upgrade [Card]"].Value and not (Options["Auto Equip [Card]"].Value and CardInfo("slot") == true) then
                            RF:InvokeServer("UpgradeCard", Display.Slot1.Value)
                            RF:InvokeServer("UpgradeCard", Display.Slot2.Value)
                            RF:InvokeServer("UpgradeCard", Display.Slot3.Value)
                        end

                        if Options["Auto Sell [Card]"].Value and #misc.rarity > 0 and not (Options["Auto Equip [Card]"].Value and CardInfo("slot") == true) then
                            local q = {
                                Display.Slot1.Value,
                                Display.Slot2.Value,
                                Display.Slot3.Value,
                                "CardInventorySlot"
                            }
                            for i, v in ipairs(LpUi.MainGui.CenterUIFrame.Inventory.Frame.CardInventoryFrame.CardInventoryScrollingFrame:GetChildren()) do
                                if v:IsA("ImageButton") and not table.find(q,v.Name) and not v.CardLock.Visible then
                                    for x, o in ipairs(r.TextGradients:GetChildren()) do
                                        if table.find(misc.rarity,o.Name) and tostring(o.Color) == tostring(v.Epic.Color) then
                                            RF:InvokeServer("SellCard",v.Name)
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if (GameId ~= 7338881230 and GameId ~= 6938803436 and GameId ~= 7274690025) or Gui.Unloaded then break end
                    pcall(function ()
                        if Options["Auto Claim [Raid Token]"].Value and not Display.DailyGemForCheckingShop.Value then
                            RF:InvokeServer("GiveFreeDailyGemFromShop")
                        end
                        if Options["Auto Claim [Quest]"].Value then
                            for i,v in ipairs(LpUi.MainGui.CenterUIFrame.QuestFrame.QuestFrames.DailyQuestFrame.DailyQuestScrollingFrame:GetChildren()) do
                                if v:IsA("ImageLabel") then
                                    if v.QuestCounter.Text:split(" / ")[1] >= v.QuestCounter.Text:split(" / ")[2] and v.Complete.Visible == false then
                                        RF:InvokeServer("CompleteDailyQuest",v.Name)
                                        v.Complete.Visible = true
                                    end
                                end
                            end
                            for i,v in ipairs(LpUi.MainGui.CenterUIFrame.QuestFrame.QuestFrames.WeeklyQuestFrame.WeeklyQuestScrollingFrame:GetChildren()) do
                                if v:IsA("ImageLabel") then
                                    if v.QuestCounter.Text:split(" / ")[1] >= v.QuestCounter.Text:split(" / ")[2] and v.Complete.Visible == false then
                                        RF:InvokeServer("CompleteDailyQuest",v.Name)
                                        v.Complete.Visible = true
                                    end
                                end
                            end
                        end
                        if Options["Auto Claim [Speed Raid]"].Value then
                            for i,v in ipairs(LpUi.MainGui.CenterUIFrame.SpeedRaidFrame:GetChildren()) do
                                if v.Name == "Shade" and i == 11 then
                                    a.SHADE_QUEST = v
                                end
                            end
                            for i,v in ipairs(a.SHADE_QUEST.SpeedRaidScrollingFrame:GetChildren()) do
                                if v:IsA("ImageButton") then
                                    if v.RaidsButton.Cost.Text == "CLAIM" then
                                        local a_b = v.Name:split("SpeedRaidRewardTemplate")[2]
                                        RF:InvokeServer("ClaimWeeklySpeedRaidReward",tonumber(a_b))
                                        v.RaidsButton.Cost.Text = "CLAIMED"
                                    end
                                end
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                while true do
                    if (GameId ~= 7338881230 and GameId ~= 6938803436 and GameId ~= 7274690025) or Gui.Unloaded then break end
                    pcall(function ()
                        task.wait(0.35)
                        if not EnabledFarm() or (Options["Auto Equip [Card]"].Value and CardInfo("slot") == true) or LpUi.UniversalGui.TeleportingUI.Visible or a.teleporting or a.eq then return end
                        local i, f, x, v = tostring , Options["Enabled FriendsOnly"].Value, Options["Enabled Hardcore"].Value, Options["Selected Type [Boss Rush]"]
                        if a.raid then
                            Gui:Notify({
                                Title = "Successfully room created",
                                Content = nil,
                                Show = false,
                                SubContent = "MapName: "..Options["Selected Raid"].Value.."\nDifficulty: Easy".."\nFriendsOnly: "..i(f).."\nHardcore: false\nStarting In 5 Seconds.",
                                Duration = 5
                            })
                            task.wait(5)
                            RE:FireServer("RemovePlayerFromParty")
                            RF:InvokeServer("CreateRoom",{
                                ["Difficulty"] = "Easy",
                                ["FriendsOnly"] = f,
                                ["MapName"] = Options["Selected Raid"].Value,
                                ["Hardcore"] = false
                            })
                            RF:InvokeServer("TeleportPlayers")
                        else
                            if Options["Auto Join [Speed Raid]"].Value and Lvl.Value >= 25 and #CharacterInfo() > 0 and LpUi.MainGui.CenterUIFrame.PlayButtonsFrame.Frame.SpeedRaidBanner.SpeedRaidBannerOpenText.Text == "Ready to enter" then
                                Gui:Notify({
                                    Title = "Successfully room created",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "MapName: ShadowRaid\nCharacter: " ..CharacterInfo()[1].. "\nStarting In 5 Seconds.",
                                    Duration = 5
                                })
                                a.shadownraid = true
                                task.wait(5)
                                RF:InvokeServer("TeleportToShadowRaid",CharacterInfo()[1])
                            elseif Options["Auto Join [Raid Challenge]"].Value and Lvl.Value >= 30 and LpUi.MainGui.CenterUIFrame.DailyRaidChallengeFrame.RaidChallengeRewardAvailable.Text == "Reward Available" then
                                Gui:Notify({
                                    Title = "Successfully room created",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "MapName: RaidChallenge\nAward Status: Reward Available\nStarting In 5 Seconds.",
                                    Duration = 5
                                })
                                task.wait(5)
                                RF:InvokeServer("TeleportToRaidChallenge")
                            elseif Options["Auto Join [Infinite Mode]"].Value and Lvl.Value >= 20 and not Display.InfiniteModeReward.Value then
                                Gui:Notify({
                                    Title = "Successfully room created",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "MapName: Infinite Mode\nDifficulty: Infinite\nFriendsOnly: "  ..i(f) .. "\nHardcore: false\nStarting In 5 Seconds.",
                                    Duration = 5
                                })
                                task.wait(5)
                                RE:FireServer("RemovePlayerFromParty")
                                RF:InvokeServer("CreateRoom",{
                                    ["Difficulty"] = "Infinite",
                                    ["FriendsOnly"] = f,
                                    ["MapName"] = "Infinite Mode",
                                    ["Hardcore"] = false
                                })
                                RF:InvokeServer("TeleportPlayers")
                            elseif Options["Auto Join [Boss Rush]"].Value and Lvl.Value >= 15 and v.Value == "Free" and Display.BossRushFreeEntry.Value > 0 then
                                Gui:Notify({
                                    Title = "Successfully room created",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "MapName: BossRush\nFree Entry Left: " .. tostring(Display.BossRushFreeEntry.Value) .."\nStarting In 5 Seconds.",
                                    Duration = 5
                                })
                                task.wait(5)
                                RF:InvokeServer("TeleportToBossRush")
                            elseif Options["Auto Join [Boss Rush]"].Value and Lvl.Value >= 15 and v.Value ~= "Free" and tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) >= 1 then
                                Gui:Notify({
                                    Title = "Successfully room created",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "MapName: BossRush\nTicket Entry Left: " .. LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text .."\nStarting In 5 Seconds.",
                                    Duration = 5
                                })
                                task.wait(5)
                                RF:InvokeServer("TeleportToBossRush")
                            elseif Options["Auto Join [Boss Rush]"].Value and Lvl.Value >= 15 and v.Value == "Gem" and tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) == 0 and tonumber(Func:TextG(info("gem") , ",")) >= 250 then
                                repeat
                                    if not Notify["Gem"] then
                                        Notify["Gem"] =
                                        Gui:Notify({
                                            Title = "Auto Join [Boss Rush]",
                                            Content = nil,
                                            Show = false,
                                            SubContent = "Buying Ticket: 0/10",
                                            Duration = 9e9 * 9e9
                                        })
                                    else
                                        RF:InvokeServer("BuyBossRushShopItem","Boss Rush Ticket (Gem)")
                                        Notify["Gem"].SubContentLabel.Text = "Buying Ticket: " ..LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text.."/10"
                                    end
                                    task.wait(0.25)
                                until not Options["Auto Join [Boss Rush]"].Value or tonumber(Func:TextG(info("gem") , ",")) < 250 or tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) >= 10 or Gui.Unloaded
                                if Notify["Gem"] then Notify["Gem"]:Close() Notify["Gem"] = nil end
                                if Options["Auto Join [Boss Rush]"].Value and tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) >= 1 then
                                    Gui:Notify({
                                        Title = "Successfully room created",
                                        Content = nil,
                                        Show = false,
                                        SubContent = "MapName: BossRush\nTicket Entry Left: " .. LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text .."\nStarting In 5 Seconds.",
                                        Duration = 5
                                    })
                                    task.wait(5)
                                    RF:InvokeServer("TeleportToBossRush")
                                end
                            elseif Options["Auto Join [Boss Rush]"].Value and Lvl.Value >= 15 and v.Value == "Raid" and tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) == 0 and tonumber(Func:TextG(info("raidtoken") , ",")) >= 150 then
                                repeat
                                    if not Notify["Raid"] then
                                        Notify["Raid"] =
                                        Gui:Notify({
                                            Title = "Auto Join [Boss Rush]",
                                            Content = nil,
                                            Show = false,
                                            SubContent = "Buying Ticket: 0/10",
                                            Duration = 9e9 * 9e9
                                        })
                                    else
                                        RF:InvokeServer("BuyBossRushShopItem","Boss Rush Ticket (Raid)")
                                        Notify["Raid"].SubContentLabel.Text = "Buying Ticket: " ..LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text.."/10"
                                    end
                                    task.wait(0.25)
                                until not Options["Auto Join [Boss Rush]"].Value or tonumber(Func:TextG(info("raidtoken") , ",")) < 150 or tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) >= 10 or Gui.Unloaded
                                if Notify["Raid"] then Notify["Raid"]:Close() Notify["Raid"] = nil end
                                if Options["Auto Join [Boss Rush]"].Value and tonumber(LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text) >= 1 then
                                    Gui:Notify({
                                        Title = "Successfully room created",
                                        Content = nil,
                                        Show = false,
                                        SubContent = "MapName: BossRush\nTicket Entry Left: " .. LpUi.MainGui.CenterUIFrame.BossRushFrame.BossRushEntryPassCount.Text .."\nStarting In 5 Seconds.",
                                        Duration = 5
                                    })
                                    task.wait(5)
                                    RF:InvokeServer("TeleportToBossRush")
                                end
                            elseif Options["Auto Join [Highnest]"].Value or Options["Auto Join [Normal]"].Value then
                                Gui:Notify({
                                    Title = "Successfully room created",
                                    Content = nil,
                                    Show = false,
                                    SubContent = "MapName: ".. (a.room or Options["Selected Dimension"].Value) .. "\nDifficulty: " .. (a.diff or Options["Selected Difficulty"].Value) .. "\nFriendsOnly: " .. i(f) .. "\nHardcore: " .. i(x) .. "\nStarting In 5 Seconds.",
                                    Duration = 5
                                })
                                task.wait(5)
                                RE:FireServer("RemovePlayerFromParty")
                                RF:InvokeServer("CreateRoom",{
                                    ["Difficulty"] = a.diff or Options["Selected Difficulty"].Value,
                                    ["FriendsOnly"] = f,
                                    ["MapName"] = a.room or Options["Selected Dimension"].Value,
                                    ["Hardcore"] = x
                                })
                                RF:InvokeServer("TeleportPlayers")
                            end
                        end
                    end)
                    task.wait()
                end
            end
        )

        task.spawn(
            function ()
                if GameId == 7338881230 or GameId == 6938803436 or GameId == 7274690025 or Gui.Unloaded then return end
                task.wait(2)
                local q, f, i, x, m = {}, {}, {}, {}, {}

                local o , y
                local fs, fd, ff, fg =
                    Display.StageClear.Value,
                    Display.BossRushClears.Value,
                    Display.WeeklyShadowRaidsCleared.Value,
                    Display.RaidClears.Value

                    if LpUi.BattleGui.CenterUIFrame.RaidDataFrame.Visible then
                        o, y = Bar("res") , LpUi.UniversalGui.UniversalCenterUIFrame.RaidResultUI
                        for k, l in ipairs(Display:GetChildren()) do
                            if l.Name.find(l.Name,"RaidBeat") then
                                if not m[l.Name] then
                                    m[l.Name] = {}
                                end
                                table.insert(m[l.Name],l.Value)
                            end
                        end
                    else
                        o, y = LpUi.UniversalGui.UniversalCenterUIFrame.ResultUI.Frame.RewardFrame.RewardGridFrame, LpUi.UniversalGui.UniversalCenterUIFrame.ResultUI
                    end
                AddSignal.h(
                    o.ChildAdded:Connect(function (v)
                        if not table.find({"Gold","TraitToken","RaidCurrency","BossRushCurrency","Gem"},v.Name) then
                            if v.Name == "RewardTemplate" then
                                for k, le in pairs(require(r.Modules.settings)) do
                                    if le == "CharacterSettings" then
                                        for u, E in pairs(le) do
                                            if v.RewardImage.Image == E.icon then
                                                table.insert(q,"`[0] Character [" .. u .."]`")
                                            end
                                        end
                                    end
                                end
                            else
                                if not v:FindFirstChild("LevelReq") or v.LevelReq.Text == "" or not v.LevelReq.Visible then
                                    if not v:FindFirstChild("Gradient") then
                                        table.insert(q,"`[0] "..v.Name .."`")
                                    elseif v:FindFirstChild("Gradient") then
                                        if tostring(v.Gradient.Color) == "0 0.352941 1 0.407843 0 1 0.513726 1 0.635294 0 " then
                                            table.insert(q,"`[0] "..v.Name .. " [Uncommon]`")
                                        elseif tostring(v.Gradient.Color) == "0 0 0.666667 1 0 1 0.6 0.780392 1 0 " then
                                            table.insert(q,"`[0] "..v.Name .. " [Rare]`")
                                        elseif tostring(v.Gradient.Color) == "0 0.666667 0.333333 1 0 1 0.352941 0.494118 1 0 " then
                                            table.insert(q,"`[0] "..v.Name .. " [Epic]`")
                                        elseif tostring(v.Gradient.Color) == "0 1 0.380392 0.392157 0 1 1 0.639216 0.278431 0 " then
                                            table.insert(q,"`[0] "..v.Name .. " [Legendary]`")
                                        elseif tostring(v.Gradient.Color) == "0 0.407843 0.0941176 0.0980392 0 0.510815 1 0 0.0156863 0 1 0.439216 0.0705882 0.0784314 0 " then
                                            table.insert(q,"`[0] "..v.Name .. " [Mythic]`")
                                        elseif tostring(v.Gradient.Color) == "0 1 0.976471 0.258824 0 0.541523 1 0.494118 0.976471 0 1 0.333333 1 0.945098 0 " then
                                            table.insert(q,"`[0] "..v.Name .. " [Divine]`")
                                        end
                                    end
                                else
                                    local ii = v.LevelReq.Text:gsub("Lv. ","")
                                    if not v:FindFirstChild("Gradient") then
                                        table.insert(q,"`["..ii.."] "..v.Name .." [Common]`")
                                    elseif v:FindFirstChild("Gradient") then
                                        if tostring(v.Gradient.Color) == "0 0.352941 1 0.407843 0 1 0.513726 1 0.635294 0 " then
                                            table.insert(q,"`["..ii.."] "..v.Name .." [Uncommon]`")
                                        elseif tostring(v.Gradient.Color) == "0 0 0.666667 1 0 1 0.6 0.780392 1 0 " then
                                            table.insert(q,"`["..ii.."] "..v.Name .." [Rare]`")
                                        elseif tostring(v.Gradient.Color) == "0 0.666667 0.333333 1 0 1 0.352941 0.494118 1 0 " then
                                            table.insert(q,"`["..ii.."] "..v.Name .." [Epic]`")
                                        elseif tostring(v.Gradient.Color) == "0 1 0.380392 0.392157 0 1 1 0.639216 0.278431 0 " then
                                            table.insert(q,"`["..ii.."] "..v.Name .." [Legendary]`")
                                        elseif tostring(v.Gradient.Color) == "0 0.407843 0.0941176 0.0980392 0 0.510815 1 0 0.0156863 0 1 0.439216 0.0705882 0.0784314 0 " then
                                            table.insert(q,"`["..ii.."] "..v.Name .." [Mythic]`")
                                        elseif tostring(v.Gradient.Color) == "0 1 0.976471 0.258824 0 0.541523 1 0.494118 0.976471 0 1 0.333333 1 0.945098 0 " then
                                            table.insert(q,"`["..ii.."] "..v.Name .." [Divine]`")
                                        end
                                    end
                                end
                            end
                        else
                            if tonumber(v.LevelReq.Text) then
                                if not f[v.Name] then
                                    f[v.Name] = {}
                                end
                                table.insert(f[v.Name], tonumber(v.LevelReq.Text))
                            end
                        end
                    end),
                    y:GetPropertyChangedSignal("Visible"):Connect(function ()
                        task.wait(3.5)
                        if not Options["Enabled Webhook [Notify]"].Value or not string.find(Options["Webhook [URL]"].Value,"https://discord.com/api/webhooks") then return end
                        for jj, xx in pairs(f) do
                            local name_count
                            local sum = 0
                            if #xx > 0 then
                                for oo = 1, #xx do
                                    sum = sum + xx[oo]
                                    if jj == "Gold" then
                                        name_count = "`["..sum.."] Gold ["..info("gold").."]`"
                                    elseif jj == "Gem" then
                                        name_count = "`["..sum.."] Gem ["..info("gem").."]`"
                                    elseif jj == "TraitToken" then
                                        name_count = "`["..sum.."] TraitToken ["..info("traittoken").."]`"
                                    elseif jj == "RaidCurrency" then
                                        name_count = "`["..sum.."] RaidToken ["..info("raidtoken").."]`"
                                    elseif jj == "BossRushCurrency" then
                                        name_count = "`["..sum.."] BossRushToken ["..info("bossrush").."]`"
                                    end
                                end
                                table.insert(i,name_count)
                            else
                                table.insert(i,"`[0] None [Unknow]  `")
                            end
                        end
                        if #q == 0 then
                            table.insert(q,"`[0] None [Unknow]   `")
                        end

                        local TimeEnd = "Time: 00:00"
                        local DamageDeal = "Damage: "..Func:RoundNumber(Lp.leaderstats.Damage.Value)
                        local Rank = "Unknown: F"
                        local ClearTime = "GameClears: Unknown"
                        local GameName = "GameMap: Unknown"
                        local GameStatus = " [End!]"

                        if y == LpUi.UniversalGui.UniversalCenterUIFrame.ResultUI then
                            local ww = y.Frame.ResultDiamond.ResultRank.Image
                            TimeEnd = y.Frame.TimeText.Text

                            if ww == "rbxassetid://7443889715" then
                                Rank = "Rank: S+"
                            elseif ww == "rbxassetid://6715353612" then
                                Rank = "Rank: S"
                            elseif ww == "rbxassetid://6891959728" then
                                Rank = "Rank: A"
                            elseif ww == "rbxassetid://6891959611" then
                                Rank = "Rank: B"
                            elseif ww == "rbxassetid://6891959460" then
                                Rank = "Rank: C"
                            elseif ww == "rbxassetid://6782568839" then
                                Rank = "Rank: F"
                            else
                                Rank = "Rank: D"
                            end

                            if table.find(q,"`[0] None [Unknow]   `") and table.find(i,"`[0] None [Unknow]  `") and Rank == "Rank: F" then
                                GameStatus = " [Defeat!]"
                                GameName = "Dimension: " .. GameMap .. "\nStage Clear: " .. n1("stage")
                                ClearTime = "DimensionClears: " .. Display.StageClear.Value
                            else
                                GameStatus = " [Victory!]"
                                GameName = "Dimension: " .. GameMap .. "\nStage Clear: " .. n1("stage")
                                ClearTime = "DimensionClears: " .. Display.StageClear.Value
                                local bbb = LpUi.BattleGui.CenterUIFrame

                                if GameMap == "VirtualUser" or GameMap == "Infinite Mode" then
                                    if GameMap == "VirtualUser" then
                                        TimeEnd = "Time: 08:00"
                                        GameName = "GameMap: "..GameMap.."\nScore: "..bbb.EnemiesDefeatedBack.EnemyDefeatedNumber.Text.."\nScore (Highest): "..Display.TimeChallengeHighScore.Value
                                        ClearTime = "UnknownClears: 0"
                                    else
                                        GameName = "GameMap: "..GameMap.."\nWave Reach: "..bbb.WaveClearClearText.Text.."\nWave Clear: "..tonumber(bbb.WaveClearClearText.Text - 1).."\nWave Clear (Highest): "..Display.InfiniteRecord.Value
                                        ClearTime = "DimensionClears: "..Display.StageClear.Value
                                    end
                                else
                                    if Display.StageClear.Value ~= fs then
                                        GameName = "Dimension: " .. GameMap:split("Dimension")[1] .. "\nStage Clear: " .. n1("stage")
                                    elseif Display.BossRushClears.Value ~= fd then
                                        TimeEnd = y.Frame.TimeText.Text.."\nBest Record: "..Display.BossRushRecordString.Value
                                        GameName = "GameMap: "..GameMap.."\nStage Clear: 3"
                                        ClearTime = "BossRushClears: "..Display.BossRushClears.Value
                                    elseif Display.WeeklyShadowRaidsCleared.Value ~= ff then
                                        GameName = "Shadow: " .. GameMap:split("Raid")[1] .. "\nStage Clear: " .. n1("stage")
                                        ClearTime = "ShadowRaidsCleared: "..Display.WeeklyShadowRaidsCleared.Value
                                    end
                                end
                            end
                        else
                            TimeEnd = "Time: 08:00"
                            Rank = "Rank:"..LpUi.UniversalGui.UniversalCenterUIFrame.RaidResultUI.Frame.RankText.Text:split(":")[2]
                            GameName = "Raid: "..GameMap:split("Raid")[1].."\nStage Clear: 0"
                            ClearTime = "RaidClears: Unknown"

                            if Display.RaidClears.Value ~= fg then
                                for xx,oo in pairs(m) do
                                    if Display:FindFirstChild(xx).Value ~= oo[1] then
                                        GameName = "Raid: "..GameMap:split("Raid")[1].."\nStage Clear: 0"
                                        ClearTime = "RaidClears: "..Display.RaidClears.Value.."\n"..xx..": "..(oo[1] + 1)
                                    end
                                end
                            else
                                GameName = "Daily Raid Challenge: "..GameMap:split("Raid")[1].."\nStage Clear: 0"
                            end
                        end
                        local content = nil
                        if Options["Enabled Webhook [Ping]"].Value then
                            for cc, bb in pairs(misc.webhook) do
                                for xx = 1,#q do
                                    if type(cc) == "number" and bb == "Character" then
                                        if string.find(q[xx],bb) then
                                            local aa = q[xx]:split("]")[2]:split("["):gsub(" ","")
                                            if aa == bb then
                                                table.insert(x, q[xx])
                                            end
                                        end
                                    elseif type(cc) == "number" and bb ~= "Character" then
                                        if string.find(q[xx],bb) then
                                            local aa = q[xx]:split("]")[2]:split("[")[2]:gsub(" ","")
                                            if aa == bb then
                                                table.insert(x,q[xx])
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        if #x > 0 then
                            content = "<@"..tostring(Options["Webhook [ID]"].Value) .. ">".."\n`You received:` "..table.concat(x,"\n`You received:` ")
                        end
                        local text = "```\nLevel: "..Lvl.Value .. "["..info("exp").."]" .."\nCardsOwned: "..Display.CardsOwned.Value.."/"..Display.MaxCardsOwned.Value.."\nCurrency: \n  ∘  Gem: "..info("gem") .. "\n  ∘  Gold: "..info("gold") .. "\n  ∘  RaidToken: "..info("raidtoken").."\n  ∘  TraitToken: "..info("traittoken") .. "\n  ∘  ShadowToken: "..info("speedraid").."\n  ∘  BossRushToken: "..info("bossrush").."```"
                        local Data = h:JSONEncode({
                            ["username"] = "Anime Dimensions Simulator : Notification",
                            ["avatar_url"] = "https://tr.rbxcdn.com/c4eb434ab38ef6770fcaa70357ffc105/150/150/Image/Webp",
                            content = content,
                            embeds = {
                                {
                                    ["title"] = "**✦ Webhook Notifaction ✦**",
                                    ["color"] = tonumber(Func:HexColor(Options["Webhook [Color]"].Value, "0x")),
                                    ["description"] = nil,
                                    ["footer"] = {
                                        ["text"] = "Time: "..os.date("%c").."\nCredit: YT » @crazyday3693",
                                        ["icon_url"] = "https://yt3.ggpht.com/yti/ANjgQV_KI8R3VhsnEhzYD0M1EJXUU29p0YC5gzrrhv8nWzA7j6s=s88-c-k-c0x00ffffff-no-rj"
                                    },
                                    ["thumbnail"] = {
                                        ["url"] = "https://tr.rbxcdn.com/c4eb434ab38ef6770fcaa70357ffc105/150/150/Image/Webp",
                                    },
                                    ["fields"] = {
                                        {
                                            ["name"] = "**Item Rewards**",
                                            ["value"] = "\n"..table.concat(q,"\n"),
                                            ["inline"] = true
                                        },
                                        {
                                            ["name"] = "**Currency Rewards**",
                                            ["value"] = "\n"..table.concat(i,"\n"),
                                            ["inline"] = true
                                        },
                                        {
                                            ["name"] = "**Match Result" .. GameStatus .."**",
                                            ["value"] = "```\n".. GameName .. "\n" .. Rank .. "\n" .. TimeEnd .. "\n" .. DamageDeal .."\n" ..ClearTime.. "```",
                                            ["inline"] = false
                                        },
                                        {
                                            ["name"] = "**Player Information**".." __**|| ["..Lp.Name.."] ||**__",
                                            ["value"] = text,
                                            ["inline"] = false
                                        }
                                    }
                                }
                            }
                        })
                        local response = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or (request)
                        response({Url = Options["Webhook [URL]"].Value, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = Data})

                    end)
                )
            end
        )


